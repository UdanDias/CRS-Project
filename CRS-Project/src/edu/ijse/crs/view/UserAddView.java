/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.crs.view;

import edu.ijse.crs.controller.AdminController;
import edu.ijse.crs.controller.FacultyController;
import edu.ijse.crs.controller.StudentController;
import edu.ijse.crs.controller.UserController;
import edu.ijse.crs.dto.AdminDTO;
import edu.ijse.crs.dto.FacultyDTO;
import edu.ijse.crs.dto.StudentDTO;
import edu.ijse.crs.dto.UserDTO;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author USER
 */
public class UserAddView extends javax.swing.JFrame {

    private StudentController studentController;
    private StudentDTO studentDTO;
    private AdminController adminController;
    private AdminDTO adminDTO;
    private FacultyController facultyController;
    private FacultyDTO facultyDTO;// Declare instance variable
    private String userType;

    /**
     * Creates new form UserAddView
     */
    public UserAddView(StudentDTO studentDTO, StudentController studentController) {
        this.userType = "Student";
        this.studentController = studentController;
        this.studentDTO = studentDTO;
        initComponents();

    }

    public UserAddView(AdminDTO adminDTO, AdminController adminController) {
        this.userType = "Admin";
        this.adminController = adminController;
        this.adminDTO = adminDTO;
        initComponents();

    }

    public UserAddView(FacultyDTO facultyDTO, FacultyController facultyController) {
        this.userType = "Faculty";
        this.facultyController = facultyController;
        this.facultyDTO = facultyDTO;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        comboRole = new javax.swing.JComboBox<>();
        btnSaveUser = new javax.swing.JButton();
        txtPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblUserName.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserName.setText("User Name");

        txtUserName.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserNameKeyPressed(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPassword.setText("Password");

        lblRole.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRole.setText("Role");

        comboRole.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        comboRole.setForeground(new java.awt.Color(51, 51, 51));
        comboRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Faculty", "Student", " " }));
        comboRole.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboRoleKeyPressed(evt);
            }
        });

        btnSaveUser.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnSaveUser.setText("Save User");
        btnSaveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUserActionPerformed(evt);
            }
        });
        btnSaveUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveUserKeyPressed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSaveUser)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comboRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(comboRole, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(btnSaveUser)
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUserActionPerformed
        saveUser();
    }//GEN-LAST:event_btnSaveUserActionPerformed

    private void txtUserNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPassword.requestFocus();  
        }
    }//GEN-LAST:event_txtUserNameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboRole.requestFocus();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void comboRoleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboRoleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSaveUser.requestFocus(); 
        } else if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int selectedIndex = comboRole.getSelectedIndex();
            int itemCount = comboRole.getItemCount();

            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                if (selectedIndex > 0) {
                    comboRole.setSelectedIndex(selectedIndex - 1); 
                } else {
                    comboRole.setSelectedIndex(itemCount - 1); 
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (selectedIndex < itemCount - 1) {
                    comboRole.setSelectedIndex(selectedIndex + 1); 
                } else {
                    comboRole.setSelectedIndex(0); 
                }
            }
        }
    }//GEN-LAST:event_comboRoleKeyPressed

    private void btnSaveUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveUserKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveUser();  
        }
    }//GEN-LAST:event_btnSaveUserKeyPressed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveUser;
    private javax.swing.JComboBox<String> comboRole;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void saveUser() {
        String userName = txtUserName.getText();
        String password = new String(txtPassword.getText());
        String role = comboRole.getSelectedItem().toString();

        if (userName.isEmpty() || password.isEmpty() || role.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
            return;
        }

        
        if (!role.equalsIgnoreCase(userType)) {
            String errorMessage = switch (userType) {
                case "Student" ->
                    "Only 'Student' role is allowed here. Use Admin/Faculty Management for other roles.";
                case "Admin" ->
                    "Only 'Admin' role is allowed here. Use Student/Faculty Management for other roles.";
                case "Faculty" ->
                    "Only 'Faculty' role is allowed here. Use Student/Admin Management for other roles.";
                default ->
                    "Invalid role selected!";
            };
            JOptionPane.showMessageDialog(this, errorMessage);
            return; 
        }

        
        UserDTO userDTO = new UserDTO(userName, password, role);

        try {
            UserController userController = new UserController();
            String response = userController.addUser(userDTO);

            if (response.equals("Successfully Added User")) {
                int userId = userController.getUserIdByUserName(userName);
                if (userId == -1) {
                    JOptionPane.showMessageDialog(this, "Failed to retrieve user ID!");
                    return;
                }

                
                switch (userType) {
                    case "Student" -> {
                        if (studentDTO != null) {
                            studentDTO.setUserId(userId);
                            String studentResponse = studentController.addStudent(studentDTO);
                            JOptionPane.showMessageDialog(this, studentResponse);
                        }
                    }
                    case "Admin" -> {
                        if (adminDTO != null) {
                            adminDTO.setUserId(userId);
                            String adminResponse = adminController.addAdmin(adminDTO);
                            JOptionPane.showMessageDialog(this, adminResponse);
                        }
                    }
                    case "Faculty" -> {
                        if (facultyDTO != null) {
                            facultyDTO.setUserId(userId);
                            String facultyResponse = facultyController.addFaculty(facultyDTO);
                            JOptionPane.showMessageDialog(this, facultyResponse);
                        }
                    }
                }

                this.dispose(); 
            } else {
                JOptionPane.showMessageDialog(this, "User creation failed!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

}
