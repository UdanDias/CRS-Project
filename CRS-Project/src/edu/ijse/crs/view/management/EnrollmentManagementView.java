/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.crs.view.management;

import edu.ijse.crs.view.dashBoard.DashBoardView;
import edu.ijse.crs.controller.CourseController;
import edu.ijse.crs.controller.EnrollmentController;
import edu.ijse.crs.dto.CourseDTO;
import edu.ijse.crs.dto.EnrollmentDTO;
import edu.ijse.crs.dto.UserDTO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

/**
 *
 * @author USER
 */
public class EnrollmentManagementView extends javax.swing.JFrame {

    private EnrollmentController enrollmentController = new EnrollmentController();
    private UserDTO loggedInUser;
    private DashBoardView dashBoardView;
    private CourseController courseController = new CourseController();
    private EnrollmentDTO enrollmentDTO;

    /**
     * Creates new form EnrollmentManagementView
     */

    public EnrollmentManagementView(DashBoardView dashBoardView, UserDTO dto) {
        if (dto == null) {
            JOptionPane.showMessageDialog(this, "User not logged in.");
            return;
        }

        this.loggedInUser = dto;
        this.dashBoardView = dashBoardView;

        initComponents();
        setWelcomeText(dto);
        populateComboSelectCourse();

        int studentId = getStudentId();
        if (studentId != -1) {
            loadTable(); 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        lblselectCourse = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnrollment = new javax.swing.JTable();
        btnEnrollNow = new javax.swing.JButton();
        btnDropCourse = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();
        comboSelectSemester = new javax.swing.JComboBox<>();
        lblselectSemester = new javax.swing.JLabel();
        comboSelectCourse = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblHeader.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(85, 136, 201));
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Course Enrollment");

        lblselectCourse.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblselectCourse.setText("Select Course");
        lblselectCourse.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblEnrollment.setBackground(new java.awt.Color(223, 232, 232));
        tblEnrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblEnrollment);

        btnEnrollNow.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnEnrollNow.setForeground(new java.awt.Color(85, 136, 201));
        btnEnrollNow.setText("Enroll Now");
        btnEnrollNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollNowActionPerformed(evt);
            }
        });

        btnDropCourse.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnDropCourse.setForeground(new java.awt.Color(85, 136, 201));
        btnDropCourse.setText("Drop Course");
        btnDropCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropCourseActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(85, 136, 201));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblWelcome.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        comboSelectSemester.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        comboSelectSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st Semester", "2nd Semester", "3rd Semester", "4th Semester", "5th Semester", "6th Semester", "7th Semester", "8th Semester" }));
        comboSelectSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelectSemesterActionPerformed(evt);
            }
        });

        lblselectSemester.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblselectSemester.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblselectSemester.setText("Select Semester");
        lblselectSemester.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        comboSelectCourse.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblselectSemester, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblselectCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboSelectSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(btnEnrollNow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDropCourse)
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblWelcome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblselectCourse)
                            .addComponent(comboSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboSelectSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblselectSemester)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnrollNow)
                            .addComponent(btnDropCourse))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBack)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        back();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnEnrollNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollNowActionPerformed
        enrollNow();
    }//GEN-LAST:event_btnEnrollNowActionPerformed

    private void btnDropCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropCourseActionPerformed
        dropCourse();
    }//GEN-LAST:event_btnDropCourseActionPerformed

    private void comboSelectSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelectSemesterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSelectSemesterActionPerformed

//    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDropCourse;
    private javax.swing.JButton btnEnrollNow;
    private javax.swing.JComboBox<String> comboSelectCourse;
    private javax.swing.JComboBox<String> comboSelectSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JLabel lblselectCourse;
    private javax.swing.JLabel lblselectSemester;
    private javax.swing.JTable tblEnrollment;
    // End of variables declaration//GEN-END:variables
private void setWelcomeText(UserDTO userDTO) {
        if (userDTO != null) {
            lblWelcome.setText("Welcome, " + userDTO.getUserName());
        }
    }


    private int getStudentId() {
        try {
            if (loggedInUser == null) {
                throw new Exception("User not logged in.");
            }
            int userId = loggedInUser.getUserId();

            int studentId = enrollmentController.getStudentIdbyUserId(userId);

            return studentId;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return -1;
    }

    public void loadTable() {
        try {

            String columns[] = {"Enrollment ID", "Student", "Course", "Semester", "Grade"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {

                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblEnrollment.setModel(dtm);
            ArrayList<EnrollmentDTO> enrollmentDtos = enrollmentController.getEnrollmentsByStudent(getStudentId());
            if (enrollmentDtos != null) {
                for (EnrollmentDTO enrollmentDto : enrollmentDtos) {

                    Object[] rowData = {enrollmentDto.getEnrollmentId(),
                        enrollmentDto.getStudentId(),
                        enrollmentDto.getCourseId(),
                        enrollmentDto.getSemester(),
                        enrollmentDto.getGrade()};
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void enrollNow() {
        try {
            int studentId = getStudentId();
            if (studentId == -1) {
                JOptionPane.showMessageDialog(this, "Invalid student. Please log in again.");
                return;
            }

            int courseId = getCourseIdByCourseName();
            if (courseId == -1) {
                JOptionPane.showMessageDialog(this, "Please select a valid course.");
                return;
            }

            Object selectedSemester = comboSelectSemester.getSelectedItem();
            if (selectedSemester == null) {
                JOptionPane.showMessageDialog(this, "Please select a semester.");
                return;
            }

            
            int enrolledStudents = enrollmentController.getUniqueStudentCount(courseId);
            CourseDTO courseDto = courseController.getCourse(courseId);
            int availableSeats = courseDto.getMaxEnrollment() - enrolledStudents;

            if (availableSeats <= 0) {
                JOptionPane.showMessageDialog(this, "No available seats for this course.");
                return;
            }

            
            EnrollmentDTO enrollmentDTO = new EnrollmentDTO(
                    studentId,
                    courseId,
                    selectedSemester.toString(),
                    "N/A"
            );

            String resp = enrollmentController.enrollStudent(enrollmentDTO);

            loadTable();
            JOptionPane.showMessageDialog(this, resp);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while enrolling the student.");
        }
    }

    private void back() {
        this.setVisible(false); 
        dashBoardView.setVisible(true); 
    }

    private void dropCourse() {
        try {
            int selectedRow = tblEnrollment.getSelectedRow();

            
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a course to drop.");
                return;
            }

            
            Object value = tblEnrollment.getValueAt(selectedRow, 0);
            if (value == null) {
                JOptionPane.showMessageDialog(this, "Invalid selection.");
                return;
            }

            int enrollmentId;
            try {
                enrollmentId = Integer.parseInt(value.toString());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid enrollment ID format.");
                return;
            }

            
            String response = enrollmentController.dropCourse(enrollmentId);
            loadTable();
            JOptionPane.showMessageDialog(this, response);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while dropping the course: " + e.getMessage());
        }
    }

    private int getCourseIdByCourseName() {
        try {
            Object selectedCourse = comboSelectCourse.getSelectedItem();

            
            if (selectedCourse == null) {
                JOptionPane.showMessageDialog(this, "Please select a course.");
                return -1;
            }

            
            String selectedText = selectedCourse.toString();
            String[] parts = selectedText.split(" - ");

            if (parts.length < 2) {
                JOptionPane.showMessageDialog(this, "Invalid course format. Please select a valid course.");
                return -1;
            }

            String courseName = parts[1]; 

            int courseId = courseController.getCourseIdByCourseName(courseName);

            
            if (courseId == -1) {
                JOptionPane.showMessageDialog(this, "Course not found in the system.");
            }

            return courseId;
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while fetching the course ID: " + e.getMessage());
        }
        return -1;
    }

    private void populateComboSelectCourse() {
        try {
            comboSelectCourse.removeAllItems();
            ArrayList<CourseDTO> courses = courseController.getAllCourses();
            for (CourseDTO course : courses) {
                comboSelectCourse.addItem(course.getCourseId() + " - " + course.getTitle());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while populating the comboBox " + e.getMessage());
        }

    }

}
