/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.crs.view.management;

import edu.ijse.crs.view.dashBoard.DashBoardView;
import edu.ijse.crs.controller.CourseController;
import edu.ijse.crs.controller.EnrollmentController;
import edu.ijse.crs.controller.UserController;
import edu.ijse.crs.dto.CourseDTO;
import edu.ijse.crs.dto.StudentDTO;
import edu.ijse.crs.dto.UserDTO;
import edu.ijse.crs.view.LoginView;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class CourseManagementView extends javax.swing.JFrame {

    private CourseController courseController = new CourseController();
    private UserController userController = new UserController();
    private LoginView loginView = new LoginView();

    private DashBoardView dashBoardView;
    private EnrollmentController enrollmentController;

    /**
     * Creates new form StudentView
     */

    public CourseManagementView(DashBoardView dashBoardView) {
        this.dashBoardView = dashBoardView;
        this.enrollmentController = new EnrollmentController();
        initComponents();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblCreditHours = new javax.swing.JLabel();
        txtCreditHours = new javax.swing.JTextField();
        txtMaxEnrollment = new javax.swing.JTextField();
        lblDepartment = new javax.swing.JLabel();
        txtDepartment = new javax.swing.JTextField();
        lblMaxEnrollment = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblAvailableSeats = new javax.swing.JLabel();
        txtAvailableSeats = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHeader.setFont(new java.awt.Font("Segoe UI Emoji", 1, 36)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(85, 136, 201));
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Course Management");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTitle.setText("Title");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtTitle.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        lblCreditHours.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCreditHours.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreditHours.setText("Credit Hours");
        lblCreditHours.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtCreditHours.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtCreditHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreditHoursActionPerformed(evt);
            }
        });

        txtMaxEnrollment.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtMaxEnrollment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxEnrollmentActionPerformed(evt);
            }
        });

        lblDepartment.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDepartment.setText("Department");
        lblDepartment.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtDepartment.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartmentActionPerformed(evt);
            }
        });

        lblMaxEnrollment.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMaxEnrollment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMaxEnrollment.setText("Max Enrolllment");
        lblMaxEnrollment.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnAdd.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(85, 136, 201));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(85, 136, 201));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(85, 136, 201));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblCourse.setBackground(new java.awt.Color(223, 232, 232));
        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCourseMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCourse);

        btnBack.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(85, 136, 201));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAvailableSeats.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblAvailableSeats.setText("Available Seats");
        lblAvailableSeats.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtAvailableSeats.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtAvailableSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvailableSeatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(213, 213, 213))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBack)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(50, 50, 50)
                                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAvailableSeats)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtAvailableSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblDepartment)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(lblMaxEnrollment)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtMaxEnrollment, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnDelete)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnUpdate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(lblCreditHours)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtCreditHours, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCreditHours)
                    .addComponent(txtCreditHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxEnrollment)
                    .addComponent(txtMaxEnrollment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnUpdate)
                        .addComponent(btnDelete))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAvailableSeats)
                        .addComponent(txtAvailableSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

    private void txtCreditHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreditHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreditHoursActionPerformed

    private void txtMaxEnrollmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxEnrollmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxEnrollmentActionPerformed

    private void txtDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartmentActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        add();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCourseMouseClicked
        get();
    }//GEN-LAST:event_tblCourseMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        back();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtAvailableSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvailableSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvailableSeatsActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvailableSeats;
    private javax.swing.JLabel lblCreditHours;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblMaxEnrollment;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTextField txtAvailableSeats;
    private javax.swing.JTextField txtCreditHours;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtMaxEnrollment;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void add() {
        try {
            
            if (txtTitle.getText().trim().isEmpty() || txtCreditHours.getText().trim().isEmpty()
                    || txtDepartment.getText().trim().isEmpty() || txtMaxEnrollment.getText().trim().isEmpty()
                    || txtAvailableSeats.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(this, "All fields must be filled.");
                return;
            }

            
            int creditHours, maxEnrollment, availableSeats;
            try {
                creditHours = Integer.parseInt(txtCreditHours.getText().trim());
                maxEnrollment = Integer.parseInt(txtMaxEnrollment.getText().trim());
                availableSeats = Integer.parseInt(txtAvailableSeats.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Credit Hours, Max Enrollment, and Available Seats must be valid numbers.");
                return;
            }

            CourseDTO courseDTO = new CourseDTO(
                    txtTitle.getText().trim(),
                    creditHours,
                    txtDepartment.getText().trim(),
                    maxEnrollment,
                    availableSeats
            );

            String resp = courseController.addCourse(courseDTO);
            JOptionPane.showMessageDialog(this, resp);
            loadTable();
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void update() {

        try {
            int selectedRow = tblCourse.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a course to update.");
                return;
            }
            if (txtTitle.getText().trim().isEmpty() || txtDepartment.getText().trim().isEmpty()
                    || txtMaxEnrollment.getText().trim().isEmpty() || txtCreditHours.getText().trim().isEmpty()
                    || txtAvailableSeats.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields must be filled.");
                return;
            }
            int courseId = (int) tblCourse.getValueAt(selectedRow, 0);

            CourseDTO courseDTO = new CourseDTO(
                    courseId,
                    txtTitle.getText(),
                    Integer.parseInt(txtCreditHours.getText()),
                    txtDepartment.getText(),
                    Integer.parseInt(txtMaxEnrollment.getText()),
                    Integer.parseInt(txtAvailableSeats.getText())
            );
            String resp = courseController.updateCourse(courseDTO);
            JOptionPane.showMessageDialog(this, resp);
            loadTable();
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());

        }
    }

    private void delete() {

        try {
            int selectedRow = tblCourse.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a course to delete.");
                return;
            }

            int courseId = (int) tblCourse.getValueAt(tblCourse.getSelectedRow(), 0);
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this course?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                String resp = courseController.deleteCourse(courseId);
                JOptionPane.showMessageDialog(this, resp);
                loadTable();
                clearForm();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while deleting student.");
        }
    }

    private void get() {
        int selectedRow = tblCourse.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a course first.");
            return;
        }

        int courseId = (int) tblCourse.getValueAt(tblCourse.getSelectedRow(), 0);
        try {
            CourseDTO courseDto = courseController.getCourse(courseId);
            if (courseDto != null) {

                txtTitle.setText(courseDto.getTitle());
                txtDepartment.setText(courseDto.getDepartment());
                txtMaxEnrollment.setText(Integer.toString(courseDto.getMaxEnrollment()));
                txtCreditHours.setText(Integer.toString(courseDto.getCreditHours()));
                txtAvailableSeats.setText(Integer.toString(courseDto.getAvailableSeats()));
            } else {
                JOptionPane.showMessageDialog(this, "Course not found");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void loadTable() {
        try {
            String columns[] = {"Course ID", "Title", "Credit Hours", "Department", "Max Enrollment", "Available Seats"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {

                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblCourse.setModel(dtm);
            ArrayList<CourseDTO> courseDtos = courseController.getAllCourses();
            if (courseDtos != null) {
                for (CourseDTO courseDto : courseDtos) {
                    int enrolledStudents = enrollmentController.getUniqueStudentCount(courseDto.getCourseId());
                    int availableSeats = courseDto.getMaxEnrollment() - enrolledStudents;
                    Object[] rowData = {courseDto.getCourseId(),
                        courseDto.getTitle(),
                        courseDto.getCreditHours(),
                        courseDto.getDepartment(),
                        courseDto.getMaxEnrollment(),
                        availableSeats
                    };
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void clearForm() {
        txtTitle.setText("");
        txtCreditHours.setText("");
        txtDepartment.setText("");
        txtMaxEnrollment.setText("");
        txtAvailableSeats.setText("");

    }

    private void back() {
        this.setVisible(false);
        dashBoardView.setVisible(true);
    }

}
